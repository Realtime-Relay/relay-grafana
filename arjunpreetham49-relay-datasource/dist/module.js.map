{"version":3,"file":"module.js","mappings":"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","sources":["webpack://arjunpreetham49-relay-datasource/external amd \"@grafana/data\"","webpack://arjunpreetham49-relay-datasource/external amd \"@grafana/runtime\"","webpack://arjunpreetham49-relay-datasource/external amd \"@grafana/ui\"","webpack://arjunpreetham49-relay-datasource/external amd \"module\"","webpack://arjunpreetham49-relay-datasource/external amd \"react\"","webpack://arjunpreetham49-relay-datasource/external amd \"rxjs\"","webpack://arjunpreetham49-relay-datasource/webpack/bootstrap","webpack://arjunpreetham49-relay-datasource/webpack/runtime/compat get default export","webpack://arjunpreetham49-relay-datasource/webpack/runtime/define property getters","webpack://arjunpreetham49-relay-datasource/webpack/runtime/hasOwnProperty shorthand","webpack://arjunpreetham49-relay-datasource/webpack/runtime/make namespace object","webpack://arjunpreetham49-relay-datasource/webpack/runtime/publicPath","webpack://arjunpreetham49-relay-datasource/./node_modules/grafana-public-path.js","webpack://arjunpreetham49-relay-datasource/./types.ts","webpack://arjunpreetham49-relay-datasource/./datasource.ts","webpack://arjunpreetham49-relay-datasource/./module.ts","webpack://arjunpreetham49-relay-datasource/./components/ConfigEditor.tsx","webpack://arjunpreetham49-relay-datasource/./components/QueryEditor.tsx"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__781__;","module.exports = __WEBPACK_EXTERNAL_MODULE__531__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__308__;","module.exports = __WEBPACK_EXTERNAL_MODULE__959__;","module.exports = __WEBPACK_EXTERNAL_MODULE__269__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"public/plugins/arjunpreetham49-relay-datasource/\";","\nimport amdMetaModule from 'amd-module';\n\n__webpack_public_path__ =\n  amdMetaModule && amdMetaModule.uri\n    ? amdMetaModule.uri.slice(0, amdMetaModule.uri.lastIndexOf('/') + 1)\n    : 'public/plugins/arjunpreetham49-relay-datasource/';\n","import { DataSourceJsonData } from '@grafana/data';\nimport { DataQuery } from '@grafana/schema';\n\nexport interface QueryInput extends DataQuery {\n  topic?: string\n  start_time?: string\n}\n\nexport const DEFAULT_QUERY: Partial<QueryInput> = {\n  topic: \"\",\n  start_time: \"${__from:date:iso}\"\n};\n\nexport interface DataPoint {\n  Value: object;\n}\n\nexport interface DataSourceResponse {\n  datapoints: DataPoint[];\n}\n\n/**\n * These are options configured for each DataSource instance\n */\nexport interface MyDataSourceOptions extends DataSourceJsonData {\n  path?: string;\n}\n\n/**\n * Value that is used in the backend, but never sent over HTTP to the frontend\n */\nexport interface MySecureJsonData {\n  apiKey?: string;\n  secretKey?: string;\n}\n","import { DataSourceInstanceSettings, CoreApp, ScopedVars, DataQueryRequest, DataQueryResponse, LiveChannelScope } from '@grafana/data';\nimport { DataSourceWithBackend, getGrafanaLiveSrv, getTemplateSrv, logInfo } from '@grafana/runtime';\nimport { Observable, merge } from 'rxjs';\n// import { crypto } from 'crypto';\n\nimport { QueryInput, MyDataSourceOptions, DEFAULT_QUERY } from './types';\n\nexport class DataSource extends DataSourceWithBackend<QueryInput, MyDataSourceOptions> {\n  constructor(instanceSettings: DataSourceInstanceSettings<MyDataSourceOptions>) {\n    super(instanceSettings);\n  }\n\n  getDefaultQuery(_: CoreApp): Partial<QueryInput> {\n    return DEFAULT_QUERY;\n  }\n\n  applyTemplateVariables(query: QueryInput, scopedVars: ScopedVars) {\n    var start = getTemplateSrv().replace(\"${__from:date:iso}\", scopedVars)\n    var topic = getTemplateSrv().replace(query.topic, scopedVars)\n\n    const date = new Date(start);\n\n    // Convert to Unix timestamp (in seconds)\n    const unixTimestamp = Math.floor(date.getTime() / 1000);\n\n    // Adding time to create unique path\n    var pathData = unixTimestamp\n\n    return {\n      ...query,\n      topic: topic,\n      start_time: start,\n      path: pathData\n    };\n  }\n\n  filterQuery(query: QueryInput): boolean {\n    // if no query has been provided, prevent the query from being executed\n    return true;\n  }\n\n  query(request: DataQueryRequest<QueryInput>): Observable<DataQueryResponse> {\n    const observables = request.targets.map((query, index) => {\n\n      // To apply scoped vars\n      const finalQuery = this.applyTemplateVariables(query, request.scopedVars);\n\n      return getGrafanaLiveSrv().getDataStream({\n        addr: {\n          scope: LiveChannelScope.DataSource,\n          namespace: this.uid,\n          path: finalQuery.path,\n          data: {\n            ...finalQuery,\n          },\n        },\n      });\n    });\n\n    return merge(...observables);\n  }\n}\n\n","import { DataSourcePlugin } from '@grafana/data';\nimport { DataSource } from './datasource';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { QueryEditor } from './components/QueryEditor';\nimport { QueryInput, MyDataSourceOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<DataSource, QueryInput, MyDataSourceOptions>(DataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n","import React, { ChangeEvent } from 'react';\nimport { InlineField, Input, SecretInput } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { MyDataSourceOptions, MySecureJsonData } from '../types';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<MyDataSourceOptions, MySecureJsonData> {}\n\nexport function ConfigEditor(props: Props) {\n  const { onOptionsChange, options } = props;\n  const { jsonData, secureJsonFields, secureJsonData } = options;\n\n  const onPathChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...jsonData,\n        path: event.target.value,\n      },\n    });\n  };\n\n  // Secure field (only sent to the backend)\n  const onAPIKeyChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onOptionsChange({\n      ...options,\n      secureJsonData: {\n        apiKey: event.target.value,\n      },\n    });\n  };\n\n  const onSKChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onOptionsChange({\n      ...options,\n      secureJsonData: {\n        ...jsonData,\n        secretKey: event.target.value,\n      },\n    });\n  };\n\n  const onResetAPIKey = () => {\n    onOptionsChange({\n      ...options,\n      secureJsonFields: {\n        ...options.secureJsonFields,\n        apiKey: false,\n      },\n      secureJsonData: {\n        ...options.secureJsonData,\n        apiKey: '',\n      },\n    });\n  };\n\n  const onResetSecretKey = () => {\n    onOptionsChange({\n      ...options,\n      secureJsonFields: {\n        ...options.secureJsonFields,\n        secretKey: false,\n      },\n      secureJsonData: {\n        ...options.secureJsonData,\n        secretKey: '',\n      },\n    });\n  };\n\n  return (\n    <>\n      <InlineField label=\"Path\" labelWidth={14} interactive tooltip={'Relay Service URL'}>\n        <Input\n          id=\"config-editor-path\"\n          onChange={onPathChange}\n          value={jsonData.path}\n          placeholder=\"Server endpoint\"\n          width={40}\n        />\n      </InlineField>\n      <InlineField label=\"API Key\" labelWidth={14} interactive tooltip={'Project API Key'}>\n        <SecretInput\n          required\n          id=\"config-editor-api-key\"\n          isConfigured={secureJsonFields.apiKey}\n          value={secureJsonData?.apiKey}\n          placeholder=\"Enter your API key\"\n          width={40}\n          onReset={onResetAPIKey}\n          onChange={onAPIKeyChange}\n        />\n      </InlineField>\n      <InlineField label=\"Secret\" labelWidth={14} interactive tooltip={'Project Secret'}>\n        <SecretInput\n          id=\"config-editor-secret-key\"\n          onChange={onSKChange}\n          value={secureJsonData?.secretKey}\n          isConfigured={secureJsonFields.secretKey}\n          onReset={onResetSecretKey}\n          placeholder=\"Enter Secret\"\n          width={40}\n        />\n      </InlineField>\n    </>\n  );\n}\n","import React, { ChangeEvent } from 'react';\nimport { InlineField, Input, Stack } from '@grafana/ui';\nimport { QueryEditorProps } from '@grafana/data';\nimport { DataSource } from '../datasource';\nimport { MyDataSourceOptions, QueryInput } from '../types';\n\ntype Props = QueryEditorProps<DataSource, QueryInput, MyDataSourceOptions>;\n\nexport function QueryEditor({ query, onChange, onRunQuery }: Props) {\n  const onTopicChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onChange({ ...query, topic: event.target.value });\n  };\n\n  const onStartTimeChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onChange({ ...query, start_time: event.target.value });\n  };\n\n  return (\n    <Stack gap={0}>\n      <InlineField label=\"Topic\" labelWidth={16} tooltip=\"Enter topic to listen from\">\n        <Input\n          id=\"query-topic\"\n          onChange={onTopicChange}\n          value={query.topic || ''}\n          onBlur={onRunQuery}\n          placeholder=\"Enter a topic\"\n        />\n      </InlineField>\n    </Stack>\n  );\n}\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__781__","__WEBPACK_EXTERNAL_MODULE__531__","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__308__","__WEBPACK_EXTERNAL_MODULE__959__","__WEBPACK_EXTERNAL_MODULE__269__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","p","slice","lastIndexOf","DEFAULT_QUERY","topic","start_time","DataSource","DataSourceWithBackend","getDefaultQuery","_","applyTemplateVariables","query","scopedVars","start","getTemplateSrv","replace","date","Date","pathData","Math","floor","getTime","path","filterQuery","request","observables","targets","map","index","finalQuery","this","getGrafanaLiveSrv","getDataStream","addr","scope","LiveChannelScope","namespace","uid","data","merge","constructor","instanceSettings","super","plugin","DataSourcePlugin","setConfigEditor","props","onOptionsChange","options","jsonData","secureJsonFields","secureJsonData","InlineField","label","labelWidth","interactive","tooltip","Input","id","onChange","event","target","placeholder","width","SecretInput","required","isConfigured","apiKey","onReset","secretKey","setQueryEditor","onRunQuery","Stack","gap","onBlur"],"sourceRoot":""}